import os

from uniswap.EtherClient import web3_client
from uniswap.utils.consts import ERC20_TOKENS
from uniswap.utils.erc20token import EIP20Contract
from uniswap.utils.erc20token_consts import (  # ROPSTEN_AAVE_TOKEN,; ROPSTEN_COMP_TOKEN,; ROPSTEN_UNI_TOKEN,
    ROPSTEN_USDC,
    ROPSTEN_WETH,
)
from uniswap.v3.main import UniswapV3
from web3 import Web3


def test_draft():
    # TODO
    # Work in progress. It's a mess for now.
    # provide complete integration and unit tests.
    MY_ADDRESS = Web3.toChecksumAddress("0x997d4c6A7cA5d524babDf1b205351f6FB623b5E7")

    ETH_HTTP_URL = os.environ.get("ETH_PROVIDER_URL")
    ETH_WALLET_PASS = os.environ.get("ETH_WALLET_PASS")
    ETH_WALLET_JSON_PATH = os.environ.get("ETH_WALLET_JSON_PATH")
    with open(ETH_WALLET_JSON_PATH) as keyfile:
        ETH_WALLET_JSON = keyfile.read()
    _w3 = web3_client.EtherClient(
        http_url=ETH_HTTP_URL,
        my_address=MY_ADDRESS,
        my_wallet_pass=ETH_WALLET_PASS,
        my_keyfile_json=ETH_WALLET_JSON,
    )
    print(_w3.w3.eth.block_number)
    uni = UniswapV3(_w3)

    # print(EIP20Contract(_w3.w3, ERC20_TOKENS[3]["USDC"]).data)
    usdc = EIP20Contract(_w3, _w3.w3, ERC20_TOKENS[3]["USDC"])
    print(usdc)
    print(usdc.data)
    print(uni.swap_router_02.address)
    print(usdc.allowance(uni.swap_router_02.address))
    print(
        usdc.approve(
            uni.swap_router_02.address, 1_000_000, wait=False, force=False
        ).__repr__()
    )

    print(uni.quoter)
    print(uni.quoter.get_functions())
    fee = 500
    amount_in = int(1.5 * 10**ROPSTEN_USDC.decimals)
    print(
        uni.quoter.functions.quoteExactInputSingle(
            ROPSTEN_USDC.address, ROPSTEN_WETH.address, fee, amount_in, 0
        ).call()
        / 10**ROPSTEN_WETH.decimals
    )
    print(
        uni.quoter._get_quote(
            ROPSTEN_USDC.address, ROPSTEN_WETH.address, 500, int(1.5 * 10**6), 0
        )
    )
    print(uni.quoter.get_trade(ROPSTEN_USDC, ROPSTEN_WETH, 0.05, 1.5))
    print("*" * 100)
    print(uni.swap_router.get_functions())
    pre_trade = uni.quoter.get_trade(ROPSTEN_USDC, ROPSTEN_WETH, 0.05, 1.5)
    tokenIn = pre_trade.route[0].address
    tokenOut = pre_trade.route[1].address
    fee = fee
    recipient = MY_ADDRESS
    deadline = 2**64
    inputAmount = uni.quoter.amount_to_wei(pre_trade.route[0], pre_trade.inputAmount)
    amountOutMinimum = uni.quoter.amount_to_wei(
        pre_trade.route[0], pre_trade.outputAmount
    )
    sqrtPriceLimitX96 = 0
    params = (
        tokenIn,
        tokenOut,
        fee,
        recipient,
        deadline,
        inputAmount,
        amountOutMinimum,
        sqrtPriceLimitX96,
    )
    print(params)
    print(uni.swap_router.functions.exactInputSingle(params))

    print(uni.swap_router_02.get_functions())

    example = "0x5ae401dc00000000000000000000000000000000000000000000000000000000632b3c80000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000c4f3995c6700000000000000000000000007865c6e87b9f70255377e024ace6630c1eaa37f000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000000000632b40d0000000000000000000000000000000000000000000000000000000000000001bf67473882cb66a4ca50102d85769b98878e203639c10ada84e70eaa4c9395a9d195ccc656a79f309b46cdd911a75fec628121ab43a4a6c7ee4f6f6eba3eb26920000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e404e45aaf00000000000000000000000007865c6e87b9f70255377e024ace6630c1eaa37f000000000000000000000000c778417e063141139fce010982780140aa0cd5ab0000000000000000000000000000000000000000000000000000000000002710000000000000000000000000997d4c6a7ca5d524babdf1b205351f6fb623b5e70000000000000000000000000000000000000000000000000000000000989680000000000000000000000000000000000000000000000000003b9849edc15f3d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"  # noqa
    # print(uni.swap_router_02.decode_multicall(example))
    print("-" * 100)
    [print(i) for i in uni.swap_router_02.decode_multicall(example)]
    print("-" * 100)
    example2 = "0x5ae401dc00000000000000000000000000000000000000000000000000000000632b3efc00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e45023b4df000000000000000000000000c778417e063141139fce010982780140aa0cd5ab00000000000000000000000007865c6e87b9f70255377e024ace6630c1eaa37f00000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000997d4c6a7ca5d524babdf1b205351f6fb623b5e700000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000005ff0008f0e76e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"  # noqa
    [print(i) for i in uni.swap_router_02.decode_multicall(example2)]
    print("-" * 100)
    example3 = "0x5ae401dc00000000000000000000000000000000000000000000000000000000632b3f8c00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e404e45aaf000000000000000000000000c778417e063141139fce010982780140aa0cd5ab00000000000000000000000007865c6e87b9f70255377e024ace6630c1eaa37f00000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000997d4c6a7ca5d524babdf1b205351f6fb623b5e700000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000000000000090a7c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"  # noqa
    [print(i) for i in uni.swap_router_02.decode_multicall(example3)]
    print("-" * 100)
    # AAVE -> USDC with complex route
    example4 = "0x5ae401dc00000000000000000000000000000000000000000000000000000000632b40580000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000124b858183f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000080000000000000000000000000997d4c6a7ca5d524babdf1b205351f6fb623b5e70000000000000000000000000000000000000000000000001bc16d674ec800000000000000000000000000000000000000000000000000000000000000b598b30000000000000000000000000000000000000000000000000000000000000042a17669420ed99fac51308567b08b7bac86837baf002710c778417e063141139fce010982780140aa0cd5ab0001f407865c6e87b9f70255377e024ace6630c1eaa37f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"  # noqa
    [print(i) for i in uni.swap_router_02.decode_multicall(example4)]
    # ETH -> USDC with 3 diff v3 pools
    print("-" * 100)
    example5 = "0x5ae401dc00000000000000000000000000000000000000000000000000000000632b424400000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000000e404e45aaf000000000000000000000000c778417e063141139fce010982780140aa0cd5ab00000000000000000000000007865c6e87b9f70255377e024ace6630c1eaa37f0000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000136dcc951d8c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e404e45aaf000000000000000000000000c778417e063141139fce010982780140aa0cd5ab00000000000000000000000007865c6e87b9f70255377e024ace6630c1eaa37f00000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000058d15e17628000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000124b858183f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000002c68af0bb14000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042c778417e063141139fce010982780140aa0cd5ab0001f4ad6d458402f60fd3bd25163575031acdce07538d0001f407865c6e87b9f70255377e024ace6630c1eaa37f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064df2ab5bb00000000000000000000000007865c6e87b9f70255377e024ace6630c1eaa37f00000000000000000000000000000000000000000000000000000000462164a0000000000000000000000000997d4c6a7ca5d524babdf1b205351f6fb623b5e700000000000000000000000000000000000000000000000000000000"  # noqa
    [print(i) for i in uni.swap_router_02.decode_multicall(example5)]
    # USDC -> WETH with 1 v3 pool 500
    example6 = "0x5ae401dc00000000000000000000000000000000000000000000000000000000632dc558000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000c4f3995c6700000000000000000000000007865c6e87b9f70255377e024ace6630c1eaa37f0000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000000000000632dca08000000000000000000000000000000000000000000000000000000000000001b451ead3fd3f8f64480e5fccd2773ba46f10e6bc1942d8bab6b60c590120eae48535ffe6d3f411532c6695c6cd527f59362a8f7283c179480706c087e3f4db2df0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e404e45aaf00000000000000000000000007865c6e87b9f70255377e024ace6630c1eaa37f000000000000000000000000c778417e063141139fce010982780140aa0cd5ab00000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000997d4c6a7ca5d524babdf1b205351f6fb623b5e70000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000027601f87700d0fc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"  # noqa
    [print(i) for i in uni.swap_router_02.decode_multicall(example6)]
    print("+" * 100)
    # print(uni.swap_router_02.swapExactTokensForTokens(pre_trade, MY_ADDRESS))
    print(
        uni.quoter.functions.quoteExactInputSingle(
            ROPSTEN_USDC.address,  # tokenIn
            ROPSTEN_WETH.address,  # tokenOut
            500,  # fee
            int(100 * 10**18),  # amountIn
            0,  # sqrtPriceLimitX96
        ).call()
    )
    pre_trade = uni.quoter.get_trade(
        ROPSTEN_USDC, ROPSTEN_WETH, fee=0.05, amount_in=100
    )
    print(pre_trade)
    # print(
    #     uni.swap_router_02.swapExactTokensForTokens(
    #         pre_trade, MY_ADDRESS, slippage=5
    #     ).__repr__()
    # )
    # ######### ---- ####
    #  call = uni.swap_router_02.functions.exactInputSingle(
    #      (
    #          ROPSTEN_USDC.address,
    #          ROPSTEN_WETH.address,
    #          500,  # fee
    #          MY_ADDRESS,  # recipient
    #          10 * 10**6,  # amountIn
    #          0,  # amountOutMinimum
    #          0,  # sqrtPriceLimitX96
    #      )
    #  )
    #  print(call)
    #  call.buildTransaction(
    #      {
    #          "chainId": 3,
    #          "from": MY_ADDRESS,
    #          "nonce": _w3.w3.eth.getTransactionCount(MY_ADDRESS),
    #      }
    #  )
